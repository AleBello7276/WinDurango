#include "pch.h"
#include "Windows.Xbox.Media.MusicDisplayProperties.h"
#include "Windows.Xbox.Media.MusicDisplayProperties.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.


namespace winrt::Windows::Xbox::Media::implementation
{
    hstring MusicDisplayProperties::Title()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::Title(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::AlbumArtist()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::AlbumArtist(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::Artist()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::Artist(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan MusicDisplayProperties::MediaStart()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::MediaStart(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan MusicDisplayProperties::MediaEnd()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::MediaEnd(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan MusicDisplayProperties::MinSeek()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::MinSeek(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan MusicDisplayProperties::MaxSeek()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::MaxSeek(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan MusicDisplayProperties::PlaybackPosition()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::PlaybackPosition(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    float MusicDisplayProperties::PlaybackRate()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::PlaybackRate(float value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Media::MediaLoggingLevel MusicDisplayProperties::LoggingLevel()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::LoggingLevel(winrt::Windows::Xbox::Media::MediaLoggingLevel const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::SubscriptionType()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::SubscriptionType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::SubscriptionTier()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::SubscriptionTier(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::DetailedMediaType()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::DetailedMediaType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::ProviderMediaInstanceId()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::ProviderMediaInstanceId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::BingId()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::BingId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::AcquisitionType()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::AcquisitionType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::AcquisitionContext()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::AcquisitionContext(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::AcquisitionContextType()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::AcquisitionContextType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::AcquisitionContextId()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::AcquisitionContextId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    int32_t MusicDisplayProperties::PlaybackIsStream()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::PlaybackIsStream(int32_t value)
    {
        throw hresult_not_implemented();
    }
    int32_t MusicDisplayProperties::PlaybackIsTethered()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::PlaybackIsTethered(int32_t value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::MarketplaceLocation()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::MarketplaceLocation(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MusicDisplayProperties::ContentLocale()
    {
        throw hresult_not_implemented();
    }
    void MusicDisplayProperties::ContentLocale(hstring const& value)
    {
        throw hresult_not_implemented();
    }
}
