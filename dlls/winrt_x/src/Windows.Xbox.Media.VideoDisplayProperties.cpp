#include "pch.h"
#include "Windows.Xbox.Media.VideoDisplayProperties.h"
#include "Windows.Xbox.Media.VideoDisplayProperties.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.


namespace winrt::Windows::Xbox::Media::implementation
{
    hstring VideoDisplayProperties::Title()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::Title(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::Subtitle()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::Subtitle(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan VideoDisplayProperties::MediaStart()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::MediaStart(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan VideoDisplayProperties::MediaEnd()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::MediaEnd(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan VideoDisplayProperties::MinSeek()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::MinSeek(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan VideoDisplayProperties::MaxSeek()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::MaxSeek(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan VideoDisplayProperties::PlaybackPosition()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::PlaybackPosition(winrt::Windows::Foundation::TimeSpan const& value)
    {
        throw hresult_not_implemented();
    }
    float VideoDisplayProperties::PlaybackRate()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::PlaybackRate(float value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Media::MediaLoggingLevel VideoDisplayProperties::LoggingLevel()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::LoggingLevel(winrt::Windows::Xbox::Media::MediaLoggingLevel const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::SubscriptionType()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::SubscriptionType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::SubscriptionTier()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::SubscriptionTier(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::DetailedMediaType()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::DetailedMediaType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::ProviderMediaInstanceId()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::ProviderMediaInstanceId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::BingId()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::BingId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::AcquisitionType()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::AcquisitionType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::AcquisitionContext()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::AcquisitionContext(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::AcquisitionContextType()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::AcquisitionContextType(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::AcquisitionContextId()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::AcquisitionContextId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    int32_t VideoDisplayProperties::PlaybackIsStream()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::PlaybackIsStream(int32_t value)
    {
        throw hresult_not_implemented();
    }
    int32_t VideoDisplayProperties::PlaybackIsTethered()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::PlaybackIsTethered(int32_t value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::MarketplaceLocation()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::MarketplaceLocation(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::ContentLocale()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::ContentLocale(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::LineupInstanceId()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::LineupInstanceId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
    hstring VideoDisplayProperties::ChannelId()
    {
        throw hresult_not_implemented();
    }
    void VideoDisplayProperties::ChannelId(hstring const& value)
    {
        throw hresult_not_implemented();
    }
}
