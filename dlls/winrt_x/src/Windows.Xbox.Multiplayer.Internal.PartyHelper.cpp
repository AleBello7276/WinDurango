#include "pch.h"
#include "Windows.Xbox.Multiplayer.Internal.PartyHelper.h"
#include "Windows.Xbox.Multiplayer.Internal.PartyHelper.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.


namespace winrt::Windows::Xbox::Multiplayer::Internal::implementation
{
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Multiplayer::Internal::PartyView> PartyHelper::GetPartyViewAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Multiplayer::Internal::PartyView> PartyHelper::GetRemotePartyViewAsync(winrt::Windows::Xbox::System::IUser actingUser, hstring lookupXboxUserId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AcceptInviteToPartyAsync(winrt::Windows::Xbox::System::IUser actingUser, hstring sessionName)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyOnBehalfOfTitleAsync(winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyAndChatOnBehalfOfTitleAsync(winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::DeclineInviteToPartyAsync(winrt::Windows::Xbox::System::IUser actingUser, hstring sessionName)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AddLocalUsersOnBehalfOfTitleAsync(winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::System::User> localUsersToAdd, hstring titleAumid)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IPropertyValue PartyHelper::GetConfigurationValue(winrt::Windows::Xbox::Multiplayer::Internal::PartyConfigType const& key, uint32_t titleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::DeclineGameSessionAsync(winrt::Windows::Xbox::Multiplayer::MultiplayerSessionReference sessionReference)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::LeavePartyAsync(winrt::Windows::Xbox::System::IUser actingUser)
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::PartyCreated(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::PartyCreatedEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::PartyCreated(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::InviteSent(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::InviteSentEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::InviteSent(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::GameSessionReady(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::GameSessionReadyEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::GameSessionReady(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::PartyStateChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::PartyStateChangedEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::PartyStateChanged(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::PartyRosterChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::PartyRosterChangedEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::PartyRosterChanged(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::MatchStatusChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::MatchStatusChangedEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::MatchStatusChanged(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::event_token PartyHelper::GameInviteSent(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Multiplayer::Internal::GameInviteSentEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::GameInviteSent(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::DeclineInviteHandleAsync(winrt::Windows::Xbox::System::IUser actingUser, hstring handleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Multiplayer::Internal::PartyView> PartyHelper::GetPartyViewAsync(winrt::Windows::Xbox::System::IUser actingUser)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyOnBehalfOfTitleAsync(winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid, winrt::Windows::Xbox::Multiplayer::MultiplayerSessionReference sessionReferenceToInviteTo, hstring titleInviteTextId, hstring titleContext)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyAndChatOnBehalfOfTitleAsync(winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid, winrt::Windows::Xbox::Multiplayer::MultiplayerSessionReference sessionReferenceToInviteTo, hstring titleInviteTextId, hstring titleContext)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AcceptInviteHandleToPartyAsync(winrt::Windows::Xbox::System::IUser actingUser, hstring handleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AcceptInviteHandleToPartyAsync(winrt::Windows::System::User actingUser, hstring handleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AcceptInviteToPartyAsync(winrt::Windows::System::User actingUser, hstring sessionName)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyOnBehalfOfTitleAsync(winrt::Windows::System::User actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyOnBehalfOfTitleAsync(winrt::Windows::System::User actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite, hstring titleAumid, winrt::Windows::Xbox::Multiplayer::MultiplayerSessionReference sessionReferenceToInviteTo, hstring titleInviteTextId, hstring titleContext)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::SetMockData(winrt::Windows::Xbox::Multiplayer::Internal::PartyMockData const& mock)
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::FireGameSessionReady(uint32_t titleId, hstring const& sessionName, hstring const& serviceConfigurationId, hstring const& sessionTemplateName)
    {
        throw hresult_not_implemented();
    }
    uint32_t PartyHelper::GetPartyDocumentCount()
    {
        throw hresult_not_implemented();
    }
    uint32_t PartyHelper::GetPartyDocumentSubscriptionCount()
    {
        throw hresult_not_implemented();
    }
    uint32_t PartyHelper::GetPartyEventListenersCount()
    {
        throw hresult_not_implemented();
    }
    void PartyHelper::SimulateLowPowerNotification(int32_t leavingLowPower)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::AddLocalUsersForTitleIdAsync(uint32_t titleId, winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::System::User> localUsersToAdd)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::RemoveLocalUsersForTitleIdAsync(uint32_t titleId, winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::System::User> localUsersToRemove)
    {
        throw hresult_not_implemented();
    }
    hstring PartyHelper::GetPartyIdForTitleId(uint32_t titleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Multiplayer::Internal::PartyView> PartyHelper::GetPartyViewForTitleIdAsync(uint32_t titleId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncAction PartyHelper::InviteToPartyForTitleIdAsync(uint32_t titleId, winrt::Windows::Xbox::System::IUser actingUser, winrt::Windows::Foundation::Collections::IVectorView<hstring> usersToInvite)
    {
        throw hresult_not_implemented();
    }
}
