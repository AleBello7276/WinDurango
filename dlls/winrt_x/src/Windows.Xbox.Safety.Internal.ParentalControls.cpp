#include "pch.h"
#include "Windows.Xbox.Safety.Internal.ParentalControls.h"
#include "Windows.Xbox.Safety.Internal.ParentalControls.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.


namespace winrt::Windows::Xbox::Safety::Internal::implementation
{
    winrt::Windows::Foundation::IAsyncOperation<int32_t> ParentalControls::RequestPermissionForAppIDAsync(hstring AppID, bool checkOnly)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<int32_t> ParentalControls::SetPinAsync(uint32_t consoleUserId, int32_t pin)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::CheckPinAsync(uint32_t consoleUserId, int32_t pin)
    {
        throw hresult_not_implemented();
    }
    bool ParentalControls::ShouldPromptPassKeyForSignIn(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::ParentApprovalSession> ParentalControls::GetParentForApprovalAsync(winrt::Windows::Xbox::System::IUser child, hstring message)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::PromptAdultForSelfApprovalAsync(winrt::Windows::Xbox::System::IUser adult, hstring contentTitle)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<uint32_t> ParentalControls::GetBlurayRestrictionLevelAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<uint32_t> ParentalControls::GetDVDRestrictionLevelAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::RequestContentPurchaseAccessAsync(winrt::Windows::Xbox::System::IUser user, winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription, bool isFree)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<hstring> ParentalControls::GetLiveContentFilterHeaderAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> ParentalControls::GetRestrictionLevelAsync(winrt::Windows::Xbox::System::IUser user, winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::CheckPasskeyForPurchaseAsync(winrt::Windows::Xbox::System::IUser user)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<hstring>> ParentalControls::GetApprovableAdultsAsync(winrt::Windows::Xbox::System::IUser user)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::ParentApprovalSession> ParentalControls::GetParentApprovalSessionFromAccountPickerResultAsync(winrt::Windows::Xbox::System::IUser child, winrt::Windows::Xbox::System::IUser selectedAdult, bool adultWasSignedIn)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::GetShouldObscureAdultTVListingsAsync()
    {
        throw hresult_not_implemented();
    }
    bool ParentalControls::CanUserSignInOverCurrentTitle(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    bool ParentalControls::DoesUserHavePasskey(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::RequestPromotionalContentAccessAsync(winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::CanUserAccessPromotionalContentAsync(uint32_t consoleUserId, winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription)
    {
        throw hresult_not_implemented();
    }
    winrt::hresult ParentalControls::RequestPermissionForAppIDWithoutUI(hstring const& AppID)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::Safety::Internal::MUAPrivacyAppCheckItem>> ParentalControls::GetUnapprovedMUAPrivacyAppsAsync(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::AddMUAPrivacyExemption(uint32_t consoleUserId, hstring const& AppID)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::ExtendScreenTimeLocally(uint32_t consoleUserId, uint32_t extensionTimeInMinutes)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::DisableCurrentScreenTimeLocally(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::GetUserNextScreenTimeLock(uint32_t consoleUserId, bool& hasLockTime, winrt::Windows::Foundation::DateTime& lockTime)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::SetUserNextScreenTimeLock(uint32_t consoleUserId, winrt::Windows::Foundation::DateTime const& lockTime)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::ClearUserNextScreenTimeLock(uint32_t consoleUserId)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::DevkitActivationRequestStatus> ParentalControls::XDesActivationAsync(hstring consoleSerialNumber)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::ParentApprovalSession> ParentalControls::GetParentForApprovalAsync(winrt::Windows::System::User child, hstring message)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::PromptAdultForSelfApprovalAsync(winrt::Windows::System::User adult, hstring contentTitle)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::RequestContentPurchaseAccessAsync(winrt::Windows::System::User user, winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription, bool isFree)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> ParentalControls::GetRestrictionLevelAsync(winrt::Windows::System::User user, winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::CheckPasskeyForPurchaseAsync(winrt::Windows::System::User user)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<hstring>> ParentalControls::GetApprovableAdultsAsync(winrt::Windows::System::User user)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::ParentApprovalSession> ParentalControls::GetParentApprovalSessionFromAccountPickerResultAsync(winrt::Windows::System::User child, winrt::Windows::System::User selectedAdult, bool adultWasSignedIn)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Safety::Internal::LiveContentFilterHeader> ParentalControls::GetLiveContentFilterHeaderDataAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::RequestBrowsePermissionForRatedContentAsync(winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription, bool checkOnly)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<bool> ParentalControls::RequestPermissionForContentAsync(winrt::Windows::Media::ContentRestrictions::RatedContentDescription ratedContentDescription, winrt::Windows::Media::ContentRestrictions::RatedContentDescription parentRatedContentDescription, bool checkOnly)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<hstring> ParentalControls::GetRatingBoardsByPriority(hstring const& region, winrt::Windows::Media::ContentRestrictions::RatedContentCategory const& category)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::OverrideMaturityLevels(uint32_t blockMaturityLevel, uint32_t warnMaturityLevel, bool canViewBlockedContent)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::OverrideUserMaturityLevel(winrt::Windows::Xbox::System::IUser const& user, uint32_t maturityLevel, bool canViewBlockedContent)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::OverridePin(int32_t userPin)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::OverrideAppContentDescription(winrt::Windows::Media::ContentRestrictions::RatedContentDescription const& contentItemDescription)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::ClearAllTestSettings()
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::TriggerRestrictionsChangedEvent()
    {
        throw hresult_not_implemented();
    }
    bool ParentalControls::CanDisplayPromotionalContent(winrt::Windows::Media::ContentRestrictions::RatedContentDescription const& ratedContentDescription)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::OverrideUserMaturityLevel(winrt::Windows::System::User const& user, uint32_t maturityLevel, bool canViewBlockedContent)
    {
        throw hresult_not_implemented();
    }
    winrt::event_token ParentalControls::AppTimerTestEvent(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable> const& handler)
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::AppTimerTestEvent(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    void ParentalControls::FireAppTimerTestEvent(winrt::Windows::Xbox::Safety::Internal::AppTimerTestEventType const& eventType, uint32_t consoleUserId, hstring const& appId, uint32_t reason, winrt::Windows::Foundation::DateTime const& nextLockOrUnlockTime, uint32_t nextLockReason, winrt::Windows::Foundation::TimeSpan const& timeLeft, winrt::Windows::Foundation::TimeSpan const& warningThreshold)
    {
        throw hresult_not_implemented();
    }
}
